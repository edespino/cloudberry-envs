# Function to retrieve the public IP and wait for SSH availability
wait_for_ssh() {
  local region="$1"
  local env_prefix="$2"
  local hostname

  # Retrieve the IP address
  hostname=$(aws ec2 describe-instances --region "$region" --filters "Name=tag:Name,Values=${env_prefix}-instance-0" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

  if [ -z "$hostname" ]; then
    echo "Failed to retrieve IP address for ${env_prefix}-instance-0 in region ${region}."
    return 1
  fi

  echo "Waiting for SSH to become available on ${hostname}..."

  for ((i=1; i<=30; i++)); do
    if nc -zv ${hostname} 22 2>&1 | grep -q 'succeeded'; then
      ssh-keyscan $(aws ec2 describe-instances --region $TF_VAR_region --filters "Name=tag:Name,Values=${TF_VAR_env_prefix}-instance-0" --query "Reservations[*].Instances[*].PublicIpAddress" --output text) >> $HOME/.ssh/known_hosts
      echo "SSH is available on ${hostname}"
      break
    else
      echo "SSH is not available yet. Retry $i/30..."
      sleep $((i*2))
    fi

    if [ $i -eq 30 ]; then
      echo "SSH is still not available after 30 attempts. Exiting."
      rename_ami "FAILED"
      cleanup
      exit 1
    fi
  done

}

# Alias to call the function with predefined parameters
alias lw='wait_for_ssh ${TF_VAR_region} ${TF_VAR_env_prefix}'

## alias lsk='ssh-keyscan $(aws ec2 describe-instances --region $TF_VAR_region --filters "Name=tag:Name,Values=${TF_VAR_env_prefix}-instance-0" --query "Reservations[*].Instances[*].PublicIpAddress" --output text) >> $HOME/.ssh/known_hosts'
alias lssh='ssh -i ${TF_VAR_env_prefix}_generated_key.pem ${TF_VAR_default_username}@$(aws ec2 describe-instances --region $TF_VAR_region --filters "Name=tag:Name,Values=${TF_VAR_env_prefix}-instance-0" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)'
